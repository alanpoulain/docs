{"version":3,"sources":["webpack:///./src/components/con/2021/utils.tsx","webpack:///./src/components/con/2021/Speakers/SpeakerCircle.tsx","webpack:///./src/components/con/2021/templates/ConferenceTemplate.tsx","webpack:///./src/components/con/2021/hooks/useSpeakers.tsx","webpack:///./src/components/con/2021/data/tracks.ts","webpack:///./src/components/con/2021/Speakers/SpeakerSocialList.tsx"],"names":["convertTime","time","dayjs","format","isMorningTime","parseInt","split","SpeakerCircle","speaker","social","hoverable","id","name","job","images","useStaticQuery","allFile","nodes","filter","imageData","image","getImage","speakerData","jobTitle","className","type","JSON","stringify","classNames","to","slug","alt","xmlns","viewBox","d","ConferenceTemplate","pageContext","location","html","title","speakerIds","speakers","trackID","track","start","end","useSpeakers","tracks","find","t","dark","lined","h1","small","length","minified","map","Fragment","key","size","dangerouslySetInnerHTML","__html","ids","allMarkdownRemark","includes","frontmatter","fields","date","SpeakerSocialList","github","twitter","href","target","rel"],"mappings":"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","file":"component---src-components-con-2021-templates-conference-template-tsx-a85e796b9347de240643.js","sourcesContent":["import dayjs from 'dayjs';\n\nexport const convertTime: (time: string) => string = (time) => dayjs(`2021-09-10T${time}`).format('HH:mm A');\n\nexport const isMorningTime: (time: string) => boolean = (time) => 12 >= parseInt(time.split(':')[0], 10);\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport classNames from 'classnames';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport { Speaker } from '../types';\nimport SpeakerSocialList from './SpeakerSocialList';\n\ninterface SpeakerCircleProps {\n  speaker: Speaker;\n  social?: boolean;\n  hoverable?: boolean;\n}\n\nconst SpeakerCircle: React.ComponentType<SpeakerCircleProps> = ({ speaker, social = true, hoverable = true }) => {\n  const { id, name, job } = speaker;\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { sourceInstanceName: { eq: \"speakersImages\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(width: 240, placeholder: DOMINANT_COLOR)\n          }\n        }\n      }\n    }\n  `);\n  const images = data.allFile.nodes.filter((imageData) => imageData.name === id)?.[0];\n  const image = getImage(images);\n\n  const speakerData = {\n    '@context': 'http://schema.org',\n    '@type': 'Person',\n    name: speaker.name,\n    jobTitle: speaker.job,\n  };\n\n  return (\n    <div className=\"conf__speaker-resume\">\n      <Helmet>\n        <script type=\"application/ld+json\">{JSON.stringify(speakerData)}</script>\n      </Helmet>\n      <Link className={classNames('conf__speaker-content', { hoverable })} to={speaker.slug}>\n        <div className=\"circle__effect\">\n          <div className=\"circle\">\n            <GatsbyImage image={image} className=\"circle__picture\" alt={name} />\n            <svg className=\"circle__plus\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 281.49 281.49\">\n              <path d=\"M140.74,0C63.14,0,0,63.14,0,140.74S63.14,281.49,140.74,281.49s140.75-63.14,140.75-140.75S218.35,0,140.74,0Zm0,263.49A122.75,122.75,0,1,1,263.49,140.74,122.88,122.88,0,0,1,140.74,263.49Z\" />\n              <path d=\"M210.91,131.74H149.74V70.58a9,9,0,1,0-18,0v61.16H70.58a9,9,0,1,0,0,18h61.16v61.17a9,9,0,0,0,18,0V149.74h61.17a9,9,0,0,0,0-18Z\" />\n            </svg>\n          </div>\n        </div>\n        <div className=\"infos\">\n          <span className=\"overline\">{job}</span>\n          <h3 className=\"h5 lined\">{name}</h3>\n        </div>\n      </Link>\n      {social && <SpeakerSocialList speaker={speaker} />}\n    </div>\n  );\n};\n\nexport default SpeakerCircle;\n","import React from 'react';\nimport Layout from '@components/con/2021/layout';\nimport SectionTitle from '@components/con/2021/common/SectionTitle';\nimport { PageProps } from 'gatsby';\nimport classNames from 'classnames';\nimport tracks from '../data/tracks';\nimport Button from '../common/Button';\nimport SpeakerCircle from '../Speakers/SpeakerCircle';\nimport { convertTime } from '../utils';\nimport useSpeakers from '../hooks/useSpeakers';\n\ninterface ConferenceTemplateProps extends PageProps {\n  pageContext: {\n    html: string;\n    title: string;\n    speakers: string[];\n    track: 'FR' | 'EN';\n    start: string;\n    end: string;\n  };\n}\n\nconst ConferenceTemplate: React.ComponentType<ConferenceTemplateProps> = ({ pageContext, location }) => {\n  const { html, title, speakers: speakerIds, track: trackID, start, end } = pageContext;\n  const speakers = useSpeakers(speakerIds);\n  const track = tracks.find((t) => t.id === trackID);\n\n  return (\n    <Layout location={location}>\n      <div className=\"conf__conference\">\n        <div className=\"container\">\n          <div className=\"conference__header\">\n            <SectionTitle dark lined h1 small={50 < title.length}>\n              <strong>{title}</strong>\n            </SectionTitle>\n            {track ? (\n              <>\n                <p className=\"overline header__subtitle\">\n                  <strong>{`Track #${track.id} `}</strong>\n                  {`- ${track.type}`}\n                </p>\n                <p className=\"header__date\">\n                  {end && start ? `September, 10 2021 Â· ${convertTime(start)} - ${convertTime(end)}` : 'Sep, 10 2021'}\n                </p>\n              </>\n            ) : null}\n          </div>\n          <div className=\"conference__content\">\n            <div className={classNames('conference__speaker', { minified: 1 < speakers.length })}>\n              {speakers.map((speaker) => (\n                <React.Fragment key={speaker.name}>\n                  <SpeakerCircle speaker={speaker} hoverable={false} social={false} />\n                  <Button className=\"white square\" size=\"small\" to={speaker.slug}>\n                    See speaker details\n                  </Button>\n                </React.Fragment>\n              ))}\n            </div>\n            <div\n              className=\"conference__abstract dotted-corner corner-bottom\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default ConferenceTemplate;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Speaker } from '../types';\n\nconst useSpeakers: (ids?: string[]) => Speaker[] = (ids) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 1000\n        filter: { frontmatter: { type: { eq: \"speaker\" } } }\n        sort: { fields: frontmatter___id, order: ASC }\n      ) {\n        nodes {\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n            id\n            job\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `);\n\n  const speakers = data.allMarkdownRemark.nodes\n    .filter((speakerData) => !ids || ids.includes(speakerData.frontmatter.id))\n    .map((speaker) => ({\n      ...speaker.frontmatter,\n      slug: speaker.fields.slug,\n    }));\n\n  return speakers;\n};\n\nexport default useSpeakers;\n","import { Track } from '../types';\n\nconst tracks: Track[] = [\n  {\n    id: 'EN',\n    type: 'English-speaking track',\n    date: '10 sep, 2021',\n  },\n  {\n    id: 'FR',\n    type: 'French-speaking track',\n    date: '10 sep, 2021',\n  },\n];\n\nexport default tracks;\n","import React from 'react';\nimport { Speaker } from '../types';\n\ninterface SpeakerSocialListProps {\n  speaker: Speaker;\n}\n\nconst SpeakerSocialList: React.ComponentType<SpeakerSocialListProps> = ({ speaker }) => {\n  const { github, twitter } = speaker;\n  return (\n    <div className=\"social__list\">\n      {github && (\n        <a href={github} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-github\" />\n        </a>\n      )}\n      {twitter && (\n        <a href={twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-twitter\" />\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default SpeakerSocialList;\n"],"sourceRoot":""}