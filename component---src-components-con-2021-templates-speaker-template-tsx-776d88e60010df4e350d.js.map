{"version":3,"sources":["webpack:///./src/components/con/2021/utils.tsx","webpack:///./src/components/con/2021/templates/SpeakerTemplate.tsx","webpack:///./src/components/con/2021/hooks/useConferences.tsx","webpack:///./src/components/con/2021/data/tracks.ts","webpack:///./src/components/con/2021/Speakers/SpeakerSocialList.tsx"],"names":["convertTime","time","dayjs","format","isMorningTime","parseInt","split","SpeakerConferenceSlot","conference","track","tracks","find","t","id","start","end","title","slug","short","className","type","size","to","SpeakerTemplate","pageContext","location","name","job","description","conferences","useConferences","data","useStaticQuery","image","getImage","allFile","nodes","filter","imageData","firstname","dark","lined","h1","alt","dangerouslySetInnerHTML","__html","speaker","length","map","allMarkdownRemark","conferenceData","frontmatter","speakers","includes","headings","value","fields","date","SpeakerSocialList","github","twitter","href","target","rel"],"mappings":"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","file":"component---src-components-con-2021-templates-speaker-template-tsx-776d88e60010df4e350d.js","sourcesContent":["import dayjs from 'dayjs';\n\nexport const convertTime: (time: string) => string = (time) => dayjs(`2021-09-10T${time}`).format('HH:mm A');\n\nexport const isMorningTime: (time: string) => boolean = (time) => 12 >= parseInt(time.split(':')[0], 10);\n","import React from 'react';\nimport Layout from '@components/con/2021/layout';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport SectionTitle from '@components/con/2021/common/SectionTitle';\nimport { PageProps, useStaticQuery, graphql } from 'gatsby';\nimport { convertTime } from '../utils';\nimport Button from '../common/Button';\nimport { Conference, Speaker } from '../types';\nimport SpeakerSocialList from '../Speakers/SpeakerSocialList';\nimport useConferences from '../hooks/useConferences';\nimport tracks from '../data/tracks';\n\nexport const SpeakerConferenceSlot: React.ComponentType<{ conference: Conference }> = ({ conference }) => {\n  const track = tracks.find((t) => t.id === conference.track);\n  const { start, end, title, slug, short } = conference;\n  return (\n    <div className=\"speaker__conference-slot dotted-corner\">\n      <div className=\"conference__track\">\n        <span className=\"h6\">{`Track #${track.id}`}</span>\n        <span className=\"overline\">{track.type}</span>\n      </div>\n      <div className=\"conference__content\">\n        <span className=\"overline\">\n          {start && end ? `Sep, 10 2021 Â· ${convertTime(start)} - ${convertTime(end)}` : 'Sep, 10 2021'}\n        </span>\n        <h3 className=\"h6 lined lined-left\">{title}</h3>\n        <p>{short}</p>\n        <Button className=\"square\" size=\"small\" to={slug}>\n          See details\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ninterface SpeakerTemplateProps extends PageProps {\n  pageContext: Speaker;\n}\n\nconst SpeakerTemplate: React.ComponentType<SpeakerTemplateProps> = ({ pageContext, location }) => {\n  const { id, name, job, description } = pageContext;\n  const conferences = useConferences(id);\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { sourceInstanceName: { eq: \"speakersImages\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(width: 400, placeholder: DOMINANT_COLOR)\n          }\n        }\n      }\n    }\n  `);\n  const image = getImage(data.allFile.nodes.filter((imageData) => imageData.name === id)?.[0]);\n  const firstname = name.split(' ')[0];\n\n  return (\n    <Layout location={location}>\n      <div className=\"conf__speaker-profile\">\n        <div className=\"speaker__header\">\n          <SectionTitle dark lined h1>\n            <strong>{name}</strong>\n          </SectionTitle>\n          <div className=\"overline speaker__job\">{job}</div>\n        </div>\n        <div className=\"container\">\n          <div className=\"speaker__about\">\n            <div className=\"speaker__picture\">\n              <div className=\"circle__effect\">\n                <GatsbyImage image={image} className=\"circle__picture\" alt={name} />\n              </div>\n            </div>\n            <div className=\"speaker__details\">\n              <div dangerouslySetInnerHTML={{ __html: description }} />\n              <SpeakerSocialList speaker={pageContext} />\n            </div>\n            {0 < conferences.length ? (\n              <div className=\"speaker__schedule\">\n                <h2 className=\"schedule__title h5\">{`${firstname}'s schedule`}</h2>\n                {conferences.map((conference) => (\n                  <SpeakerConferenceSlot conference={conference} />\n                ))}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SpeakerTemplate;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Conference } from '../types';\n\nconst useConferences: (speaker?: string) => Conference[] = (speaker) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 1000, filter: { frontmatter: { type: { eq: \"conference\" } } }) {\n        nodes {\n          frontmatter {\n            title\n            speakers\n            track\n            start\n            end\n            short\n            github\n          }\n          headings(depth: h1) {\n            value\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  return data.allMarkdownRemark.nodes\n    .filter((conferenceData) => !speaker || conferenceData.frontmatter.speakers.includes(speaker))\n    .map((conference) => ({\n      ...conference.frontmatter,\n      title: conference.headings?.[0].value,\n      slug: conference.fields.slug,\n    }));\n};\n\nexport default useConferences;\n","import { Track } from '../types';\n\nconst tracks: Track[] = [\n  {\n    id: 'EN',\n    type: 'English-speaking track',\n    date: '10 sep, 2021',\n  },\n  {\n    id: 'FR',\n    type: 'French-speaking track',\n    date: '10 sep, 2021',\n  },\n];\n\nexport default tracks;\n","import React from 'react';\nimport { Speaker } from '../types';\n\ninterface SpeakerSocialListProps {\n  speaker: Speaker;\n}\n\nconst SpeakerSocialList: React.ComponentType<SpeakerSocialListProps> = ({ speaker }) => {\n  const { github, twitter } = speaker;\n  return (\n    <div className=\"social__list\">\n      {github && (\n        <a href={github} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-github\" />\n        </a>\n      )}\n      {twitter && (\n        <a href={twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-twitter\" />\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default SpeakerSocialList;\n"],"sourceRoot":""}